pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
function new_gob(x, y, x_vel, y_vel, sprite)
 local obj = {
  x=x,
  y=y,
  x_vel=x_vel,
  y_vel=y_vel,
  sprite=sprite,
  state = 0,
  delete = 0,
  frames = 0,
  update = update_gob,
  distance = distance_to,
  draw = draw_gob,
 }
 return obj
end

function update_gob(self)

 self.x += self.x_vel
 self.y += self.y_vel

 self.frames+=1
end

function distance_to(self, gob)
 dx = self.x-gob.x
 dy = self.y-gob.y
 theta = atan2(dx, dy)
 //theta = theta%0.25 //because idk if my formula works for anges > 90'
 phi = 0.25 - theta
 dist = abs(dx*cos(theta))+abs(dy*cos(phi))
 return dist
end

function draw_gob(self)
 //-4 due to size of sprite
 spr(self.sprite, self.x-4, self.y-4)
end
-->8
function new_rot(x, y, x_vel, y_vel, sprite)
 object = new_gob(x, y, x_vel, y_vel, sprite)
 object.draw = draw_rot
 object.update = update_rot
 object.angle = 0
 object.r = 0
 object.flip_x = false
 object.flip_y = false
 object.rot_by = rot_by
 return object
end

//should r rate be in here???
//allow a way for the object to just spin?

function update_rot(self)

 update_gob(self)
 
end

function rot_by(self, rot)
 self.angle += rot
 if self.angle > 360 then self.angle = 0 end
 if self.angle < 0 then self.angle = 360 end
 update_r(self)
 update_sprite(self)
end

function update_r(self)
 if (self.angle < 23) then
  self.r = 0
 elseif (self.angle < 68) then
  self.r = 1
 elseif (self.angle < 113) then
  self.r = 2
 elseif (self.angle < 158) then
  self.r = 3
 elseif (self.angle < 203) then
  self.r = 4
 elseif (self.angle < 248) then
  self.r = 5
 elseif (self.angle < 293) then
  self.r = 6
 elseif (self.angle < 338) then
  self.r = 7
 else
  self.r = 0
 end
end

function update_sprite(self)
 if self.r == 0 then
  self.state = 2
  self.flip_x = false
  self.flip_y = false
 elseif self.r == 1  then
  self.state = 1
  self.flip_x = false
  self.flip_y = false
 elseif self.r == 2 then
  self.state = 0
  self.flip_x = false
  self.flip_y = false
 elseif self.r == 3 then
  self.state = 1
  self.flip_x = false
  self.flip_y = true
 elseif self.r == 4 then
  self.state = 2
  self.flip_x = false
  self.flip_y = true
 elseif self.r == 5 then
  self.state = 1
  self.flip_x = true
  self.flip_y = true
 elseif self.r == 6 then
  self.state = 0
  self.flip_x = true
  self.flip_y = false
 elseif self.r == 7 then
  self.state = 1
  self.flip_x = true
  self.flip_y = false
 end
end

function draw_rot(self)
 //-4 due to size of sprite
 spr(self.sprite+self.state, self.x-4, self.y-4, 1, 1, self.flip_x, self.flip_y)
end
-->8
function new_flame(x, y, x_vel, y_vel)
 object = new_gob(x, y, x_vel, y_vel, 1)
 object.draw = draw_flame
 object.update = update_flame
 return object
end

function update_flame(self)

 update_gob(self)
 
 self.state = flr(self.frames / 8)
 if (self.state == 4) then
  self.delete = 1
 end
end

function draw_flame(self)
 //-4 due to size of sprite
 spr(self.sprite+self.state, self.x-4, self.y-4)
end
-->8
function new_bullet(x, y, x_vel, y_vel, sprite)
 object = new_gob(x, y, x_vel, y_vel, sprite)
 object.draw = draw_bullet
 object.update = update_bullet
 object.frames_speed = 4
 return object
end

function update_bullet(self)
 update_gob(self)
 
 if (self.frames > self.frames_speed) then
  self.state = (self.state + 1) % 2 
  self.frames = 0
 end
end

function draw_bullet(self)
 //-4 due to size of sprite
 spr(self.sprite+self.state, self.x-4, self.y-4)
end
-->8
star={
 x=0,
 y=0,
 old_camx=0,
 old_camy=0,
 depth=1,
 col=0
}

function star.new(x, y, depth, col)
 object = {}
 for key, value in pairs(star) do
  object[key] = value
 end
 object.x = x
 object.y = y
 object.last_x = x
 object.last_y = y
 object.depth = depth
 object.col = col
 return object
end

function col_to_col(col_in) 
 //print(col_in)
 if (col_in < 5) then
  return 7
 elseif (col_in == 6) then
  return 8
 elseif (col_in == 7) then
  return 9
 elseif (col_in == 8) then
  return 10
 elseif (col_in == 9) then
  return 12
 elseif (col_in == 10) then
  return 15
 else
  return 7
 end
end

function star.update(self, camx, camy, cam_width, cam_height)
 z_camx = camx/self.depth
 z_camy = camy/self.depth
 if (self.x < z_camx) then
  self.x += cam_width
 end
 if (self.x > z_camx+cam_width) then
  self.x -= cam_width
 end
 if (self.y < z_camy) then
  self.y += cam_height
 end
 if (self.y > z_camy+cam_height) then
  self.y -= cam_height
 end
end

function star.draw(self, camx, camy)
 camera(camx/self.depth, camy/self.depth)
 //spr(self.sprite+self.state, self.x, self.y)
 dx = (camx-self.old_camx)/self.depth
 dy = (camy-self.old_camy)/self.depth
 //circfill(self.x,self.y,0.5,col_to_col(self.col))
 line(self.x, self.y, self.x+dx, self.y+dy, col_to_col(self.col))
 self.old_camx = camx
 self.old_camy = camy
 camera(camx, camy)
end
-->8
disabled_timeout = 60

function new_spaceship(x, y, sprite, accl, drag)
 object = new_rot(x, y, 0, 0, sprite)
 object.update = update_spaceship
 object.draw = draw_spaceship
 object.r_rate = 8
 object.accl = accl
 object.drag = drag
 object.fired = false
 object.boost = boost
 object.turn_left = turn_left
 object.turn_right = turn_right
 object.follow_ship = follow_ship
 object.goto_point = goto_point
 object.shoot = shoot
 object.tagged = false
 object.frame_tagged = 0
 object.disabled = false
 return object
end

function update_spaceship(self)
 update_rot(self)
 
 self.x_vel*=self.drag
 self.y_vel*=self.drag
 
 //first if stops this checking unnecesarily
 if (self.disabled == true) then
  if (self.frames > self.frame_tagged + disabled_timeout) then
   self.disabled = false
  end
 end
 
 //cap_speed(self) //gives much better movement without
end

function boost(self, flames)
 if not self.disabled then 
  add(flames, new_flame(self.x+rnd(2)-1, self.y+rnd(2)-1, -self.x_vel/4, -self.y_vel/4))
  if self.r == 0 then
   self.y_vel -= 1.414*self.accl
  elseif  self.r == 1 then
   self.x_vel += self.accl
   self.y_vel -= self.accl
  elseif self.r == 2 then
   self.x_vel += 1.414*self.accl
  elseif self.r == 3 then
   self.x_vel += self.accl
   self.y_vel += self.accl
  elseif self.r == 4 then
   self.y_vel += 1.414*self.accl
  elseif self.r == 5 then
   self.x_vel -= self.accl
   self.y_vel += self.accl
  elseif self.r == 6 then
   self.x_vel -= 1.414*self.accl
  elseif self.r == 7 then
   self.x_vel -= self.accl
   self.y_vel -= self.accl
  end
 end
end

function turn_left(self)
 rot_by(self, -r_rate)
end

function turn_right(self)
 rot_by(self, r_rate)
end

function shoot(self, bullets)
 if (self.fired == false) then
  bullet_x_vel = 0
  bullet_y_vel = 0
  if self.r == 0 then
   bullet_y_vel -= 4
  elseif self.r == 1 then
   bullet_x_vel += 2.8
   bullet_y_vel -= 2.8
  elseif self.r == 2 then
   bullet_x_vel += 4
  elseif self.r == 3 then
   bullet_x_vel += 2.8
   bullet_y_vel += 2.8
  elseif self.r == 4 then
   bullet_y_vel += 4
  elseif self.r == 5 then
   bullet_x_vel -= 2.8
   bullet_y_vel += 2.8
  elseif self.r == 6 then
   bullet_x_vel -= 4
  elseif self.r == 7 then
   bullet_x_vel -= 2.8
   bullet_y_vel -= 2.8
  end
  add(bullets, new_bullet(self.x,self.y,bullet_x_vel,bullet_y_vel,5))
  self.fired = true
 else
  self.fired = false
 end
end

//function cap_speed(self)
// self.x_vel = min(self.x_vel, self.max_x_vel)
// self.x_vel = max(self.x_vel, -self.max_x_vel)
// self.y_vel = min(self.y_vel, self.max_y_vel)
// self.y_vel = max(self.y_vel, -self.max_y_vel)
//end

function follow_ship(self, ship, follow, flames)
 
 if (ship == nil) then return end
 
 goto_point(self, ship.x, ship.y, follow, flames)
 
end

function goto_point(self, x, y, attract, flames)
 rel_x = x - self.x
 rel_y = y - self.y
 
 if (attract) then
  ydash = rel_x*sin((self.angle-90)/360) + rel_y*cos((self.angle-90)/360)
 else //avoid
  ydash = rel_x*sin((self.angle+90)/360) + rel_y*cos((self.angle+90)/360)
 end
 
 if (ydash > 0) then
  turn_right(self)
 else
  turn_left(self)
 end
 
 boost(self, flames)
end 

function draw_spaceship(self)
 draw_rot(self)
 
 if (self.tagged) then
 	circ(self.x, self.y, 14+sin(self.frames/20)*3, 8)
 end
end
-->8
r_rate = 8
spaceship_sprite = 34
flame_array = {}
flames = {}
stars = {}

camx = 0
camy = 0
camx_lthresh = 40
camx_uthresh = 87
cam_width = 127
cam_height = 127

//400x400 seemed good
world_width = 500
world_height = 500
half_world_width = world_width/2
half_world_height = world_height/2

closest_dist = 10000

timer = 0
timer_cycles = 1
max_timer = 800 //800 is good

//0 and 0.02 is good
//0.15 and -0.01 is good
//0.20 and -0.01 is good
tag_accl_bonus = 0.20
tag_drag_bonus = -0.01

flee_distance = 80

//2 and 0.6 is good
//1 and 0.8 is good
//0.5 and 0.9 is good
//0.5 and 0.95 is good
//with 0.9 drag, 0.4 for player and 0.35 for cpu
player_ship = new_spaceship(64, 64, 54, 0.2, 0.95)
tag_ship = new_spaceship(80, 80, 16, 0.2, 0.95)
tag_ship.tagged = true
tag_ship.drag += tag_drag_bonus
tag_ship.accl += tag_accl_bonus
spaceships = {}
add(spaceships, tag_ship)
add(spaceships, player_ship)
for i = 1,8 do
 add(spaceships, new_spaceship(rnd(128), rnd(128), 48, 0.2, 0.95))
 //add(spaceships, new_spaceship(100, 100, 48, 0.2, 0.95))
end

bullets = {}

 function add_rnd_star()
  rnd_x = flr(rnd(cam_width))
  rnd_y = flr(rnd(cam_height))
  rnd_depth = rnd(5)+2 //this depth looks better very far from ship
  //rnd_depth = 1
  rnd_col = flr(rnd(10))
  rnd_x *= rnd_depth
  rnd_y *= rnd_depth
  add(stars, star.new(rnd_x, rnd_y, rnd_depth,rnd_col))
 end
 
function _init()
 for i=1,100 do
  add_rnd_star()
 end
end

function _update()
 if (btn(0)) then
  player_ship:turn_left()
  //angle-=r_rate
  //update_r()
 end
 if (btn(1)) then
  player_ship:turn_right()
  //angle+=r_rate
  //update_r()
 end
 if (btn(2)) then
  //player_ship:boost()
  player_ship:boost(flames)
  //boost
 end
 if (btn(4)) then
  player_ship:shoot(bullets)
  //shoot
 end
 if (btn(5)) then
  explosion(player_ship.x, player_ship.y, player_ship.x_vel, player_ship.y_vel, 2, flames)
 end
 
 tag_ship = find_tagship(spaceships)
 
 for s in all(spaceships) do
  if (s != player_ship) then
   if (s != tag_ship) then
    if (s:distance(tag_ship) < flee_distance) then
     s:follow_ship(tag_ship, false, flames)
   	else
     closest_ship = find_closest(s, spaceships)
     s:follow_ship(closest_ship, true, flames)
    end
   elseif (s == tag_ship) then
    closest_ship = find_closest(tag_ship, spaceships)
    s:follow_ship(closest_ship, true, flames)
   end
  end
  s:update()
 end
 
 //apply world bounds
 for s in all(spaceships) do
  s.x = min(s.x, half_world_width)
  s.x = max(s.x, -half_world_width)
  s.y = min(s.y, half_world_height)
  s.y = max(s.y, -half_world_height) 
 end
 
 
 for i = 1,#spaceships do
  for j = i+1,#spaceships do
   resolve_collision(spaceships[i], spaceships[j])
  end
 end

 for key, f in pairs(flames) do
  f:update()
  if (f.delete == 1) then
   del(flames, f)
  end
 end
 
 for key, b in pairs(bullets) do
  b:update()
 end
 
 update_camera()
 
 for s in all(stars) do
  s.update(s, camx, camy, cam_width, cam_height)
 end
 
 if (timer < max_timer) then
  timer+=1
 else
  //timer has completed
  timer_cycles += 1
  timer = 0
  if (tag_ship != nil) then
   explosion(tag_ship.x, tag_ship.y, tag_ship.x_vel, tag_ship.y_vel, 2, flames)
   del(spaceships, tag_ship)
  end
  if (#spaceships > 0) then
   rnd_ship = spaceships[ceil(rnd(#spaceships))]
   rnd_ship.tagged = true
   rnd_ship.drag += tag_drag_bonus//*timer_cycles
   rnd_ship.accl += tag_accl_bonus//*timer_cycles
  end
 end
end

function update_camera()
 x_diff = player_ship.x - camx
 y_diff = player_ship.y - camy
 
 if (x_diff < camx_lthresh) then
  camx += x_diff - camx_lthresh
 elseif (x_diff > camx_uthresh) then
  camx += x_diff - camx_uthresh
 end
 
 if (y_diff < camx_lthresh) then
  camy += y_diff - camx_lthresh
 elseif (y_diff > camx_uthresh) then
  camy += y_diff - camx_uthresh
 end
 
 camera(camx, camy)
end

function _draw()
 //always redraw background
 //rectfill(camx+64,camy+64,127,127,0)
 rectfill(camx,camy,camx+127,camy+127,0)
 //circfill(x,y,7,14)
 
 for s in all(stars) do
  s.draw(s, camx, camy)
 end
 
 for key, f in pairs(flames) do
  f:draw()
 end
 for key, b in pairs(bullets) do
  b:draw()
 end
 //spr(sprite,x,y,1,1,flip_x,flip_y)
 //player_ship:draw()
 for key, s in pairs(spaceships) do
  s:draw()
 end
 
 draw_timer()
 
 if (player_ship.tagged) then
  for s in all(spaceships) do
   if (s != player_ship) then
    draw_arrow_to_gob(player_ship,s)
   end
  end
 else
  draw_arrow_to_gob(player_ship,tag_ship)
 end
 
 //print(closest_dist,2,2,7)
 //print(closest_index,2,8,7)
 //print(closest_ship,2,14,7)
 //print(flr((spaceships[1]).x)..","..flr(spaceships[1].y), 30, 2, 8)
 //print(flr(spaceships[2].x)..","..flr(spaceships[2].y), 30, 8, 9)
 //print(flr(spaceships[3].x)..","..flr(spaceships[3].y), 30, 14, 10)
 //print(flr(spaceships[4].x)..","..flr(spaceships[4].y), 30, 20, 11)
 print("mem: "..(ceil((stat(0)/2048)*100)).."%",camx,camy+112,11)
 print("cpu: "..ceil(stat(1)*100).."%",camx,camy+120,11)
 //sprites are drawn from the diagonal downwards
 //circ(test_ship.x, test_ship.y, 16, 8)
 //circ(player_ship.x, player_ship.y, 16, 8)

 //for i = 1,#spaceships do
 // for j = i+1,#spaceships do
 //  print(i..","..j, 40,2+(i-1)*12+(j-1)*6)
   
 // end
 //end
end

function find_tagship(ships)
 for key, s in pairs(ships) do
  if (s.tagged == true) then
   return s
  end
 end
end

function find_closest(gob, gobs)
 if (#gobs == 1) then
  closest_gob = gobs[0]
 elseif (#gobs > 1) then
  closest_dist = 10000 //this is the range of the calculation
  for key, g in pairs(gobs) do
   if (g != gob) then
    dist = g:distance(gob)
    if (dist < closest_dist) then
     closest_gob = g
     closest_dist = dist
     closest_index = key
    end
   end
  end
 end
 return closest_gob
end

function resolve_collision(a, b)
 range = 16
 dist = a:distance(b)
 if (not a.disabled) and (not b.disabled) then
  if (a.tagged or b.tagged) then
   if (dist < range) then
    if (a.tagged and (not b.tagged)) then
     b.disabled = true
     b.frame_tagged = b.frames
     b.drag += tag_drag_bonus
     a.drag -= tag_drag_bonus
     b.accl += tag_accl_bonus
     a.accl -= tag_accl_bonus
    elseif b.tagged and (not a.tagged) then
     a.disabled = true
     a.frame_tagged = a.frames
     a.drag += tag_drag_bonus
     b.drag -= tag_drag_bonus
     a.accl += tag_accl_bonus
     b.accl -= tag_accl_bonus
    end
    a.tagged = not a.tagged
    b.tagged = not b.tagged
   end
  end
 end
end

function explosion(x, y, x_vel, y_vel, scatter, flames)
 for i=1, 40 do
  add(flames, new_flame(x, y, x_vel+rnd(scatter)-scatter/2, y_vel+rnd(scatter)-scatter/2))
 end
end

function draw_timer()
	percent = timer/max_timer
	x_margin = 4
	y_margin = 20
	bar_height = 80
	bar_width = 3
	bomb_sprite = 7
	fill_height = bar_height*percent
	fill_top = bar_height - fill_height
	half_timer = max_timer/2
	
	if (timer < half_timer) then
	 bar_col = 12
	else
	 bar_col = 8 + flr((timer % 6) / 2)
	 //bar_col = 7 + flr((timer % 4) / 2)
	
		//spr(bomb_sprite+(timer%64)/16, camx+x_margin-2, camy+y_margin-10)
	 spr(bomb_sprite+flr((timer - half_timer) / half_timer * 4), camx+x_margin-2, camy+y_margin-10)
	end
	
	rect(camx+x_margin, camy+y_margin, camx+x_margin+bar_width, camy+y_margin+bar_height, bar_col)
	rectfill(camx+x_margin, camy+y_margin+fill_top, camx+x_margin+bar_width, camy+y_margin+fill_height, bar_col)
end

function draw_arrow_to_gob(a, b)
 angle = atan2(b.x-a.x, b.y-a.y)
 draw_arrow_on_gob(a, 25/((a:distance(b)^0.33)), angle*360)
end

function draw_arrow_on_gob(gob, size, angle)
 
 //avoid weird lines when spaceships close
 if (size > 10000) then
  return
 end
 
 radius = 20
 point_x = (radius+size) * cos(angle/360)
 point_y = (radius+size) * sin(angle/360)
 corner_radius = radius
 lcorner_x = corner_radius * cos(angle/360-0.02) //angle/360 - size/200 works nicely
 lcorner_y = corner_radius * sin(angle/360-0.02)
 rcorner_x = corner_radius * cos(angle/360+0.02)
 rcorner_y = corner_radius * sin(angle/360+0.02)
 line(gob.x+lcorner_x, gob.y+lcorner_y, gob.x+point_x, gob.y+point_y, 8)
 line(gob.x+rcorner_x, gob.y+rcorner_y, gob.x+point_x, gob.y+point_y, 8)
end
__gfx__
008880000000000000000000000900000050500000000000000000000000440000004aa0009a9000a05000900000000000000000000000000000000000000000
05888880000000000000000008098980000000050000000000000000005450490054509000545000096009090000000000000000000000000000000000000000
095588780000a0000009900000a000005000050000033000000bb0000566659a0566650005666500559096500000000000000000000000000000000000000000
088888c8000a9a00009a99009900a00000050005003bb30000b33b0055557650555576505555765009a0a9650000000000000000000000000000000000000000
088888c80000a0000099a99009a0098050000000003bb30000b33b0055555650555556505555565059a009650000000000000000000000000000000000000000
095588580000000000099000009998000050050500033000000bb000555556505555565055555650559a09650000000000000000000000000000000000000000
058888800000000000000000090800900000000000000000000000000555550005555500055555005a5995a00000000000000000000000000000000000000000
00888000000000000000000000000000050505000000000000000000005550000055500000555000a55505090000000000000000000000000000000000000000
00111000000111000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0511111001117110017cc51000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0955117111111c1101111110000000000000000000011000000cc000000000000000000000000000000000000000000000000000000000000000000000000000
011111c1515111c1111111110000000000000000001cc10000c11c00000000000000000000000000000000000000000000000000000000000000000000000000
011111c109111111115115110000000000000000001cc10000c11c00000000000000000000000000000000000000000000000000000000000000000000000000
095511510011511011511511000000000000000000011000000cc000000000000000000000000000000000000000000000000000000000000000000000000000
05111110000911100591195000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111000000051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888000000888000088880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0588888008887880087cc58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0955887888888c880888888000000000000000000080020000200800000000000000000000000000000000000000000000000000000000000000000000000000
088888c8585888c88888888800000000000000000008200000028000000000000000000000000000000000000000000000000000000000000000000000000000
088888c8098888888858858800000000000000000002800000082000000000000000000000000000000000000000000000000000000000000000000000000000
09558858008858808858858800000000000000000020080000800200000000000000000000000000000000000000000000000000000000000000000000000000
05888880000988800598895000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888000000058000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ccc000000ccc0000cccc0000222000000222000022220000eee000000eee0000eeee0000000000000000000000000000000000000000000000000000000000
05ccccc00cccacc00c9aa5c00522222002227220027cc52005eeeee00eee7ee00e7cc5e000000000000000000000000000000000000000000000000000000000
0955ccacccccc9cc0cccccc00955227222222c22022222200955ee7eeeeeecee0eeeeee000000000000000000000000000000000000000000000000000000000
0ccccc9c5c5ccc9ccccccccc022222c2525222c2222222220eeeeece5e5eeeceeeeeeeee00000000000000000000000000000000000000000000000000000000
0ccccc9c09cccccccc5cc5cc022222c209222222225225220eeeeece09eeeeeeee5ee5ee00000000000000000000000000000000000000000000000000000000
0955cc5c00cc5cc0cc5cc5cc0955225200225220225225220955ee5e00ee5ee0ee5ee5ee00000000000000000000000000000000000000000000000000000000
05ccccc00009ccc0059cc95005222220000922200592295005eeeee00009eee0059ee95000000000000000000000000000000000000000000000000000000000
00ccc00000005c000000000000222000000052000000000000eee00000005e000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000400000165002650016500265001650026500165001650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

